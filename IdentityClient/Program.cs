using System;using System.IO;using System.Linq;using System.Net.Http;using System.Security.Authentication;using System.Threading.Tasks;using IdentityServer;using IdentityModel.Client;using Microsoft.Extensions.Configuration;using Newtonsoft.Json.Linq;namespace IdentityClient{    class Program    {        static async Task Main(string[] args)        {            ConsolePrint("IdentityClient", preLineBreak: true);            var configurationBuilder = new ConfigurationBuilder()                .SetBasePath(Directory.GetCurrentDirectory())                .AddJsonFile("appsettings.json", optional: false, reloadOnChange: false)                .AddJsonFile("appsettings.Development.json", optional: true, reloadOnChange: false);            var configuration = configurationBuilder.Build();            // Discover endpoints from metadata            var discoClient = new HttpClient();            var discoResponse = await discoClient.GetDiscoveryDocumentAsync(new DiscoveryDocumentRequest            {                Address = configuration["IdentityServer:Authority"],                Policy = new DiscoveryPolicy                {                    ValidateIssuerName = false,                }            });            if (discoResponse.IsError)            {                ConsolePrint($"IDS discovery error: " + discoResponse.Error, preLineBreak: true);                return;            }            var handler = new HttpClientHandler()            {                SslProtocols = SslProtocols.Tls12 | SslProtocols.Tls11 | SslProtocols.Tls            };            var apiBaseUrl = configuration["IdentityApi:BaseUrl"];            var apiClient = new HttpClient(handler, true);            await ProbeM2MClient(discoClient, discoResponse, apiClient, apiBaseUrl);            await ProbeUserPasswdClient("alice", discoClient, discoResponse, apiClient, apiBaseUrl);        }        private static async Task ProbeUserPasswdClient(            string username,            HttpClient discoClient, DiscoveryDocumentResponse discoResponse,            HttpClient apiClient, string apiBaseUrl)        {            // Request User & Passwd token            var user = TestUsers.GetUsers().First(x => x.Username == username);            var tokenResponse2 = await discoClient.RequestPasswordTokenAsync(new PasswordTokenRequest            {                Address = discoResponse.TokenEndpoint,                UserName = user.Username,                Password = user.Password,                ClientId = "ids-ownerpasswd",                ClientSecret = "op-secret-01",                Scope = "openid profile api.management api.public",            });            if (tokenResponse2.IsError)            {                ConsolePrint("IDS User & Passwd token request error: " + tokenResponse2.Error, preLineBreak: true);                return;            }            ConsolePrint("IDS User & Passwd token response:", tokenResponse2.AccessToken, preLineBreak: true);            apiClient.SetBearerToken(tokenResponse2.AccessToken);            // Call identity api            var apiResponse3 = await apiClient.GetAsync($"{apiBaseUrl}/users/identity");            if (!apiResponse3.IsSuccessStatusCode)            {                ConsolePrint("Identity API response status code error: " + apiResponse3.StatusCode);            }            else            {                var content3 = await apiResponse3.Content.ReadAsStringAsync();                ConsolePrint("Identity API response:", JArray.Parse(content3));            }            // Call public api            var apiResponse4 = await apiClient.GetAsync($"{apiBaseUrl}/users/public");            if (!apiResponse4.IsSuccessStatusCode)            {                ConsolePrint("Public API response status code error: " + apiResponse4.StatusCode);            }            else            {                var content4 = await apiResponse4.Content.ReadAsStringAsync();                ConsolePrint("Public API response:", content4);            }            // Call manage api            var apiResponse5 = await apiClient.GetAsync($"{apiBaseUrl}/users/manage");            if (!apiResponse5.IsSuccessStatusCode)            {                ConsolePrint("Manage API response status code error: " + apiResponse5.StatusCode);            }            else            {                var content5 = await apiResponse5.Content.ReadAsStringAsync();                ConsolePrint("Manage API response:", content5);            }        }        private static async Task ProbeM2MClient(            HttpClient discClient, DiscoveryDocumentResponse discoResponse,            HttpClient apiClient, string apiBaseUrl)        {            // Request M2M token            var tokenResponse1 = await discClient.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest            {                Address = discoResponse.TokenEndpoint,                ClientId = "ids-m2m",                ClientSecret = "m2m-secret-01",                Scope = "api.management api.public",            });            if (tokenResponse1.IsError)            {                ConsolePrint("IDS M2M token request error: " + tokenResponse1.Error, preLineBreak: true);                return;            }            ConsolePrint("IDS M2M token response:", tokenResponse1.AccessToken, preLineBreak: true);            apiClient.SetBearerToken(tokenResponse1.AccessToken);            // Call identity api            var apiResponse1 = await apiClient.GetAsync($"{apiBaseUrl}/users/identity");            if (!apiResponse1.IsSuccessStatusCode)            {                ConsolePrint("Identity API response status code error: " + apiResponse1.StatusCode);            }            else            {                var content1 = await apiResponse1.Content.ReadAsStringAsync();                ConsolePrint("Identity API response:", JArray.Parse(content1));            }            // Call manage api            var apiResponse2 = await apiClient.GetAsync($"{apiBaseUrl}/users/manage");            if (!apiResponse2.IsSuccessStatusCode)            {                ConsolePrint("Manage API response status code error: " + apiResponse2.StatusCode);            }            else            {                var content2 = await apiResponse2.Content.ReadAsStringAsync();                ConsolePrint("Manage API response:", content2);            }        }        private static void ConsolePrint(string firstLine, object secondLine = null, 
            bool preLineBreak = false, bool postLineBreak = true)
        {
            if (preLineBreak)
            {
                Console.WriteLine();
            }

            Console.WriteLine(firstLine);

            if (secondLine != null)
            {
                Console.WriteLine(secondLine);
            }

            if (postLineBreak)
            {
                Console.WriteLine();
            }
        }    }}