using Duende.IdentityServer;using Duende.IdentityServer.Models;using IdentityModel;using System.Collections.Generic;using System.Linq;namespace IdentityServer{    public static class InMemoryConfig    {        // https://identityserver4.readthedocs.io/en/latest/topics/resources.html#identity-resources        //        public static IEnumerable<IdentityResource> GetIdentityResources() =>            new IdentityResource[]            {                new IdentityResources.OpenId(),                new IdentityResources.Profile(),            };        public static IEnumerable<ApiScope> GetApiScopes() =>            new List<ApiScope>            {                new ApiScope("api.public", "Access public API endpoints"),                new ApiScope("api.management", "Access management API endpoints")            };        public static IEnumerable<ApiResource> GetApiResources() =>            new List<ApiResource>            {                new ApiResource("api", "CB API resource")                {                    Scopes = GetApiScopes().Select(x => x.Name).ToList()                }            };        public static IEnumerable<Client> GetClients() =>            new Client[]             {                // Machine to machine client                new Client                {                    ClientId = "ids-m2m",                    ClientSecrets = { new Secret("m2m-secret-01".Sha256()) },                    AlwaysSendClientClaims = false,                    // No interactive user, use the clientid/secret for authentication                    AllowedGrantTypes = GrantTypes.ClientCredentials,                    AllowedScopes = GetApiScopes()                        .Select(x => x.Name)                        .ToList(),                },                // Owner Password client (Mobile, SPA)                new Client                {                    ClientId = "ids-ownerpasswd",                    ClientSecrets = { new Secret("op-secret-01".Sha256()) },                    AlwaysSendClientClaims = false,                    AllowedGrantTypes = GrantTypes.ResourceOwnerPassword,                    AllowOfflineAccess = true,                    UpdateAccessTokenClaimsOnRefresh = true,                    AllowedScopes = GetApiScopes()                        .Select(x => x.Name)                        .ToList()                        .Concat(new List<string>                        {                            IdentityServerConstants.StandardScopes.OpenId,                            IdentityServerConstants.StandardScopes.Email,                            IdentityServerConstants.StandardScopes.Profile,                        })                        .ToList()                },                // Interactive client (Mobile, SPA, ASP.NET Core MVC)                new Client                {                    ClientId = "ids-interactive",                    ClientSecrets = { new Secret("int-secret-01".Sha256()) },                    AlwaysSendClientClaims = false,                    AllowedGrantTypes = GrantTypes.Code,                    AllowOfflineAccess = true,                    RedirectUris = { "https://localhost:17443/signin-oidc" },                    PostLogoutRedirectUris = { "https://localhost:17443/" },                    FrontChannelLogoutUri = "https://localhost:17443/signout-oidc",                    AllowedScopes = GetApiScopes()                        .Select(x => x.Name)                        .ToList()                        .Concat(new List<string>                        {                            IdentityServerConstants.StandardScopes.OpenId,                            IdentityServerConstants.StandardScopes.Email,                            IdentityServerConstants.StandardScopes.Profile,                        })                        .ToList()                },            };    }}