using System.Collections.Generic;using System.IO;using IdentityServer.Infra;using Duende.IdentityServer;using Duende.IdentityServer.Validation;using Microsoft.AspNetCore.Builder;using Microsoft.AspNetCore.Hosting;using Microsoft.Extensions.Configuration;using Microsoft.Extensions.DependencyInjection;using Microsoft.Extensions.Hosting;using Microsoft.Extensions.PlatformAbstractions;using Microsoft.IdentityModel.Tokens;using Microsoft.OpenApi.Models;namespace IdentityServer{    public class Startup    {        public IWebHostEnvironment Environment { get; }        public Startup(IConfiguration configuration)        {            Configuration = configuration;        }        /// <summary>        /// Configuration ref.        /// </summary>        public IConfiguration Configuration { get; }        public void ConfigureServices(IServiceCollection services)        {            services.AddControllersWithViews();            services.AddSwaggerGen(options =>            {                options.SwaggerDoc("v1", new OpenApiInfo                {                    Title = "IdentityServer",                    Description = "IdentityServer",                    Version = "v1"                });                options.DescribeAllParametersInCamelCase();                options.TagActionsBy(api => new List<string>(1) { api.GroupName });                options.DocInclusionPredicate((_, api) => !string.IsNullOrWhiteSpace(api.GroupName));                var basePath = PlatformServices.Default.Application.ApplicationBasePath;                options.IncludeXmlComments(Path.Combine(basePath, "IdentityServer.xml"));            });            var builder = services.AddIdentityServer(options =>                {                    options.IssuerUri = Configuration["IdentityServer:IssuerUri"];                })                .AddInMemoryIdentityResources(InMemoryConfig.GetIdentityResources())                .AddInMemoryApiScopes(InMemoryConfig.GetApiScopes())                .AddInMemoryApiResources(InMemoryConfig.GetApiResources())                .AddInMemoryClients(InMemoryConfig.GetClients())                .AddTestUsers(TestUsers.GetUsers())                .AddResourceOwnerValidator<InMemoryResourceOwnerPasswordValidator>()                .AddProfileService<InMemoryProfileService>()                // Not recommended for production                .AddDeveloperSigningCredential();        }        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)        {            if (env.IsDevelopment())            {                app.UseDeveloperExceptionPage();                app.UseSwagger();                app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "IdentityServer v1"));            }            app.UseHttpsRedirection();            app.UseStaticFiles();            app.UseRouting();            app.UseIdentityServer();            app.UseAuthorization();            app.UseEndpoints(endpoints =>            {                endpoints.MapDefaultControllerRoute();            });        }    }}